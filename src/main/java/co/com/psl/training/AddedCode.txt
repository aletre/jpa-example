private void createData(IdTypeRepository idTypeRepository, CustomerRepository customerRepository,
			ProductRepository productRepository, InvoiceDetailRepository invoiceDetailRepository,
			InvoiceRepository invoiceRepository) {
		IdType cc = new IdType("CC", "Cédula Ciudadanía");
		idTypeRepository.save(cc);
		
		List<Customer> customers = new ArrayList<>();
		customers.add(new Customer("Jack", "Bauer", cc));
		customers.add(new Customer("Chloe", "O'Brian", cc));
		customers.add(new Customer("Kim", "Bauer", cc));
		customers.add(new Customer("David", "Palmer", cc));
		customers.add(new Customer("Michelle", "Dessler", cc));
		customers.add(new Customer("Tonny", "Almeida", cc));
		customers.add(new Customer("Tonny", "Almeida", cc));
		customerRepository.save(customers);
		
		List<Product> products = new ArrayList<>();
		for (int i = 0; i < 20; i++) {
			String codigoProducto = String.format("P%02d", i);
			products.add(new Product(codigoProducto, "Producto " + codigoProducto, .19f, new Random().nextInt(10_000 - 200) + 200));
		}
		productRepository.save(products);
		
		List<Invoice> invoices = new ArrayList<>();
		List<InvoiceDetail> invoiceDetails = new ArrayList<>();
		int customer = 0;
		for (int i = 0; i < 50000; i++) {
			Invoice invoice = new Invoice(customers.get(customer));
			for (Product product : products) {
				invoice.addDetail(new InvoiceDetail(invoice, product, new Random().nextInt(10 - 1) + 1));
			}
			invoices.add(invoice);
			invoiceDetails.addAll(invoice.getDetails());
			if (++customer == customers.size()) {
				customer = 0;
			}
		}
		
		invoiceRepository.save(invoices);
		invoiceDetailRepository.save(invoiceDetails);
	}